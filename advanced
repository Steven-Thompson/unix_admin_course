#!/bin/bash

#Setup binaries
FIND=/usr/bin/find

COUNT=1

while getopts ":pob:" opt; do
    #echo $((OPTIND))

    case $opt in
        p)
            #Find processor from cpuinfo and count how many there are
            PROCESSORS=$(grep processor /proc/cpuinfo -c)
            echo "There are $PROCESSORS cpu's available on this system"
            #echo $OPTIND
        ;;
        o)
            echo "There is a limit of $(ulimit -u) processes available to a single user"    
            #echo "$?"
        ;;
        b)
            ARGPOS=$COUNT

            #Setup variables
            let ARGPOS++
            eval "WILDCARD=\$$((ARGPOS))"
            let ARGPOS++
            eval "DIRECTORY=\$$((ARGPOS))"
            
            #Setup searches
            FINDFILES=$("$FIND" -name "$WILDCARD" -type f 2>/dev/null)
            COPIEDFILES=$(wc -w <<< "$FINDFILES")
            
            # Check the wildcard to see if there are results
            if [[ -z $($FIND -name "$WILDCARD" -type f) ]]; then
                echo "There are no matches for: $WILDCARD"
                exit
            fi

            # Check if there are any arguments missing before progressing
            if [[ -z $DIRECTORY  ]] || [[ -z $WILDCARD ]];  then
                echo "There are missing arguments for switch -b"
                exit
            fi

            
            # Check if there are results for the directory and make sure its a directory.
            if [[ -n $("$FIND" -name "$DIRECTORY" 2>/dev/null) ]] && [[ -d "$DIRECTORY" ]]; then
                #echo "Directory exists you are free to copy the files"
                "$FIND" -name "$WILDCARD" -type f -exec cp --parents -t "$DIRECTORY" {} \; 2>/dev/null
            # If nothing exists (file or directory) create a directory
            elif [[ ! -a $DIRECTORY  ]]; then
                mkdir -p $DIRECTORY 2>/dev/null
                "$FIND" -name "$WILDCARD" -type f -exec cp --parents -t "$DIRECTORY" {} \; 2>/dev/null
                echo "$DIRECTORY has been created. $COPIEDFILES have been copied."

                # Check if there is an error making the directory
                if [[ $? -ne 0 ]]; then
                    echo "You must supply a valid argument with the -b switch. Example: -b <wildcard> <directoryname>"
                    exit
                fi
            else
                # There is a file with the same name.
                echo "There is a file with the same name."
            fi

            # Shift requires because of second argument
            shift
        ;;
        #If there is an unknown operator then throw an error
        \?)
            echo "Unknown option: -$OPTARG"
        ;;
        #The -b operator requires an argument
        :)
            echo "Option -$OPTARG requires an argument."
        ;;
    esac

    let COUNT++
done
exit 0
